version: "3.9"
services:
  postgresql:
    container_name: postgresql
    image: postgres:12.9
    platform: linux/x86_64
    ports:
      - "5432:5432"
    environment:
      POSTGRES_USER: batch
      POSTGRES_PASSWORD: batch
      POSTGRES_DB: batchdb
    volumes:
      - ./db/postgresql/data:/var/lib/postgresql --user 1000
      - ./db/postgresql/init.d:/docker-entrypoint-initdb.d
    networks:
      batch_network:
        ipv4_address: 172.16.1.5
    extra_hosts:
      - "postgresql:172.16.1.5"
      - "mongo:172.16.1.6"
      - "oracle:172.16.1.7"
      - "jenkins:172.16.1.8"
  mongo:
    container_name: mongo
    image: mongo
    restart: always
    ports:
      - "27017:27017"
    environment:
      MONGO_INITDB_ROOT_USERNAME: mongo
      MONGO_INITDB_ROOT_PASSWORD: mongo
      MONGO_INITDB_DATABASE: mongodb
    volumes:
      - ./db/mongo/data:/var/lib/mongo
      - ./db/mongo/init.d:/docker-entrypoint-initdb.d
    networks:
      batch_network:
        ipv4_address: 172.16.1.6
    extra_hosts:
      - "postgresql:172.16.1.5"
      - "mongo:172.16.1.6"
      - "oracle:172.16.1.7"
      - "jenkins:172.16.1.8"
  oracle:
    container_name: oracle
    image: wnameless/oracle-xe-11g-r2:latest
    ports:
      - "1521:1521"
      - "5500:5500"
    environment:
      ORACLE_ALLOW_REMOTE: true
      ORACLE_DISABLE_ASYNCH_IO: true
      TZ: Asia/Seoul
    volumes:
      - ./db/oracle/oradata:/etc/oracle/oradata
      - ./db/oracle/init.d:/docker-entrypoint-initdb.d
    networks:
      batch_network:
        ipv4_address: 172.16.1.7
    extra_hosts:
      - "postgresql:172.16.1.5"
      - "mongo:172.16.1.6"
      - "oracle:172.16.1.7"
      - "jenkins:172.16.1.8"
  jenkins:
    container_name: jenkins
    image: jenkins/jenkins:lts-jdk11
    user: jenkins
    privileged: true
    environment:
      JENKINS_OPTS: --httpPort=9090 # 기본포트가 8080이나 9090으로 변경
      TZ: Asia/Seoul
    ports:
      - "9090:9090"                  # Jenkins Web UI 포트
      - "9091:9091"                # Jenkins API 포트
    volumes:
      - ./jenkins:/jenkins_home
      - /var/run/docker.sock:/var/run/docker.sock
    networks:
      batch_network:
        ipv4_address: 172.16.1.8
    extra_hosts:
      - "postgresql:172.16.1.5"
      - "mongo:172.16.1.6"
      - "oracle:172.16.1.7"
      - "jenkins:172.16.1.8"
  zookeeper:
    image: bitnami/zookeeper:latest
    ports:
      - "2181:2181"
    environment:
      - ALLOW_ANONYMOUS_LOGIN=yes
    volumes:
      - ./message/zookeeper:/zookeeper
    networks:
      - batch_network
  kafka:
    image: bitnami/kafka:latest
    ports:
      - "9092:9092"
      - "9094:9094"
    volumes:
      - ./message/kafka:/kafka
    environment:
      - ALLOW_PLAINTEXT_LISTENER=yes
      - KAFKA_ENABLE_KRAFT=no
      - KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE=true
      - KAFKA_CFG_ZOOKEEPER_CONNECT=zookeeper:2181
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:9093,EXTERNAL://:9094
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092,EXTERNAL://localhost:9094
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,EXTERNAL:PLAINTEXT,PLAINTEXT:PLAINTEXT
    depends_on:
      - zookeeper
    networks:
      - batch_network
  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: kafka-ui
    ports:
      - "8080:8080"
    environment:
      - DYNAMIC_CONFIG_ENABLED=true
      - KAFKA_CLUSTERS_0_NAME=local
      - KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS=kafka:9092
      - KAFKA_CLUSTERS_0_ZOOKEEPER=zookeeper:2181
    networks:
      - batch_network
    depends_on:
      - kafka
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.9.1
    container_name: elasticsearch
    ports:
      - "9200:9200"
      - "9300:9300"
    volumes:
      - type: bind
        source: ./elasticstack/elasticsearch/config/elasticsearch.yml
        target: /usr/share/elasticsearch/config/elasticsearch.yml
        read_only: true
      - type: volume
        source: elasticsearch
        target: /usr/share/elasticsearch/data
    environment:
      - discovery.type=single-node
      - ES_JAVA_OPS="-Xmx512m -Xms512m"
      - ELASTIC_PASSWORD=elastic
    ulimits:
      memlock:
        soft: -1
        hard: -1
    networks:
      - elk
  logstash:
    image: docker.elastic.co/logstash/logstash:8.9.1
    container_name: logstash
    ports:
      - "5000:5000/tcp"
      - "5000:5000/udp"
      - "9600:9600"
    volumes:
      - type: bind
        source: ./elasticstack/logstash/config/
        target: /usr/share/logstash/config/
        read_only: true
      - type: bind
        source: ./elasticstack/logstash/pipeline/
        target: /usr/share/logstash/pipeline/
        read_only: true
      - type: bind
        source: ./elasticstack/logstash/data/
        target: /usr/share/logstash/data/
    environment:
      - LS_JAVA_OPS="-Xmx512m -Xms512m"
      - LOGSTASH_INTERNAL_PASSWORD=elastic
    networks:
      - elk
    depends_on:
      - elasticsearch
    links:
      - elasticsearch
  kibana:
    image: docker.elastic.co/kibana/kibana:8.9.1
    container_name: kibana
    ports:
      - "5601:5601"
    volumes:
      - type: bind
        source: ./elasticstack/kibana/config/kibana.yml
        target: /usr/share/kibana/config/kibana.yml
        read_only: true
    environment:
      - KIBANA_SYSTEM_PASSWORD=elastic
    networks:
      - elk
    depends_on:
      - elasticsearch
      - logstash
    links:
      - elasticsearch

networks:
  batch_network:
    ipam:
      driver: default
      config:
        - subnet: 172.16.1.0/24
  elk:
    driver: bridge

volumes:
  elasticsearch:
    driver: local
  kibana:
    driver: local